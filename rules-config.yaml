# ═══════════════════════════════════════════════════════════════
# Flutter/Dart Rules - Remote System Configuration
# Version: 4.0.0 - Remote Rules System
# ═══════════════════════════════════════════════════════════════
#
# ⚠️ IMPORTANT: This repository now uses Remote Rules System!
#
# Instead of copying files, you only need ONE small file in your project:
#   .cascade/rules-manifest.yaml
#
# AI Agents will read documentation directly from GitHub!
#
# ═══════════════════════════════════════════════════════════════

# For Developers:
# ----------------
# 1. Read: REMOTE-USAGE.md (complete guide)
# 2. Run setup script:
#    curl -s https://raw.githubusercontent.com/Ahmed-Fathy-dev/Dart-Flutter-Rules/main/tools/setup.sh | bash
# 3. Edit .cascade/rules-manifest.yaml to choose what you need
# 4. Done! AI reads from GitHub automatically

# For AI Agents:
# ---------------
# 1. Read: AI-INTEGRATION.md FIRST
# 2. Check for .cascade/rules-manifest.yaml in user's project
# 3. Fetch docs from GitHub based on manifest
# 4. Use caching for performance

# ═══════════════════════════════════════════════════════════════
# Repository Information
# ═══════════════════════════════════════════════════════════════

repository:
  name: Dart-Flutter-Rules
  version: 4.0.0
  url: https://github.com/Ahmed-Fathy-dev/Dart-Flutter-Rules
  raw_url: https://raw.githubusercontent.com/Ahmed-Fathy-dev/Dart-Flutter-Rules/main
  
documentation:
  total_files: 56
  libraries_documented: 17
  coverage: 94%
  examples: 150+
  lines_of_code: 55000+

# ═══════════════════════════════════════════════════════════════
# Available Templates
# ═══════════════════════════════════════════════════════════════

templates:
  minimal:
    file: templates/manifest-minimal.yaml
    description: "For small projects with basic needs"
    use_when:
      - Small app (1-5 screens)
      - Learning Flutter
      - Prototypes
      - MVPs
    includes:
      - Built-in state management
      - Basic Navigator
      - Basic project structure
    
  standard:
    file: templates/manifest-standard.yaml
    description: "For medium projects with modern architecture"
    recommended: true
    use_when:
      - Production apps
      - Team of 2-5 developers
      - Business applications
      - Standard requirements
    includes:
      - Riverpod (state management)
      - GoRouter (navigation)
      - JSON serialization
      - Feature-based architecture
      - Material 3 theming
      - Error handling
      - Logging
    
  full:
    file: templates/manifest-full.yaml
    description: "For large enterprise projects"
    use_when:
      - Large-scale applications
      - Multiple teams
      - Complex requirements
      - High performance needed
    includes:
      - All state management options
      - All navigation options
      - Advanced serialization (dart_mappable)
      - ObjectBox database
      - Clean architecture
      - Comprehensive logging
      - Testing guides

# ═══════════════════════════════════════════════════════════════
# Documentation Categories
# ═══════════════════════════════════════════════════════════════

categories:
  state_management:
    priority: HIGH
    libraries:
      - built-in
      - provider
      - bloc
      - riverpod
      - getx
      - hooks
    recommended: riverpod
    
  navigation:
    priority: HIGH
    libraries:
      - navigator
      - go_router
      - go_router_builder_advanced
      - auto_route
      - deep-linking
    recommended: go_router
    
  data:
    priority: HIGH
    libraries:
      - json-serialization
      - dart-mappable
      - http-clients
      - local-storage
      - objectbox
    recommended: json-serialization
    
  architecture:
    priority: MEDIUM
    files:
      - feature-based
      - clean-architecture
      - project-structure
    recommended: feature-based
    
  ui:
    priority: MEDIUM
    files:
      - material3-theming
      - responsive-design
      - layout-best-practices
      - common-packages
    
  core:
    priority: CRITICAL
    files:
      - dart-fundamentals
      - value-equality
      - error-handling
      - async-programming
    
  tools:
    priority: MEDIUM
    files:
      - build-runner
      
  specialized:
    priority: LOW
    files:
      - environment-config
      - logging
      - testing

# ═══════════════════════════════════════════════════════════════
# Quick Links
# ═══════════════════════════════════════════════════════════════

links:
  getting_started: REMOTE-USAGE.md
  ai_guide: AI-INTEGRATION.md
  complete_summary: SESSION-COMPLETE.md
  templates_folder: templates/
  setup_scripts: tools/
  documentation: docs/INDEX.md
  
# ═══════════════════════════════════════════════════════════════
# AI Agent Instructions
# ═══════════════════════════════════════════════════════════════

ai_instructions: |
  # For AI Agents - READ THIS FIRST
  
  This repository uses a Remote Rules System.
  
  DO NOT copy files to user's project!
  
  Instead:
  1. Check if user has .cascade/rules-manifest.yaml
  2. If not, suggest setup:
     - Run setup script, OR
     - Download a template manually
  3. Read the manifest to understand what user needs
  4. Fetch relevant docs from GitHub
  5. Use caching for performance
  
  Read AI-INTEGRATION.md for complete implementation details.
  
  Manifest location in user's project:
    .cascade/rules-manifest.yaml
  
  Fetch docs from:
    https://raw.githubusercontent.com/Ahmed-Fathy-dev/Dart-Flutter-Rules/main/docs/{category}/{file}.md
  
  Always respect:
    - manifest.includes (what to read)
    - manifest.priority (what to read first)
    - manifest.overrides (user's custom rules)

# ═══════════════════════════════════════════════════════════════
# Migration from Old System
# ═══════════════════════════════════════════════════════════════

migration:
  from_version: 3.x
  to_version: 4.0.0
  breaking_changes:
    - "No longer copy files to project"
    - "Use manifest-based configuration"
    - "Remote documentation fetching"
  
  steps:
    - "Remove old .cascade/rules/ folder (if exists)"
    - "Run new setup script"
    - "Create .cascade/rules-manifest.yaml"
    - "Choose template (minimal/standard/full)"
    - "AI will handle the rest automatically"
  
  old_config: archive/rules-config-old.yaml

# ═══════════════════════════════════════════════════════════════
# End of Configuration
# ═══════════════════════════════════════════════════════════════
